import { createProgram } from './__core__/program';
export default createProgram;
export { createProgram as create };
export type { Raw } from './__core__/algebra';
export { num2raw, raw2num } from './__core__/algebra';
export { add, sub, mul, div, rem, exp } from './__core__/algebra';
export { ProgramNode, ParenthesisNode, ConditionalNode, ConstantNode, FunctionNode, OperatorNode } from './__core__/program';
export declare const OPERATORS: {
    readonly '(': "Opening parenthesis";
    readonly ')': "Closing parenthesis";
    readonly '!': "Logical NOT";
    readonly '~': "Bitwise NOT";
    readonly '**': "Exponentiation";
    readonly '*': "Multiplication";
    readonly '/': "Division";
    readonly '%': "Remainder";
    readonly '+': "Addition";
    readonly '-': "Subtraction";
    readonly '<<': "Bitwise left shift";
    readonly '>>': "Bitwise right shift";
    readonly '>>>': "Bitwise unsigned right shift";
    readonly '<': "Less than";
    readonly '<=': "Less than or equal";
    readonly '>': "Greater than";
    readonly '>=': "Greater than or equal";
    readonly '=': "Equality";
    readonly '==': "Equality";
    readonly '!=': "Inequality";
    readonly '===': "Strict equality";
    readonly '!==': "Strict inequality";
    readonly '&': "Bitwise AND";
    readonly '^': "Bitwise XOR";
    readonly '|': "Bitwise OR";
    readonly '&&': "Logical AND";
    readonly '||': "Logical OR";
    readonly '??': "Coalescing NaN";
    readonly '?': "Conditional TRUE";
    readonly ':': "Conditional FALSE";
    readonly ',': "Comma";
};
